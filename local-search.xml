<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>javascript</title>
    <link href="/2022/10/18/javascript/"/>
    <url>/2022/10/18/javascript/</url>
    
    <content type="html"><![CDATA[<ul><li><code>ajax</code> 全名 <code>async javascript and XML</code></li><li>是前后台交互的能力</li><li>也就是我们客户端给服务端发送消息的工具，以及接受响应的工具</li><li>是一个 <strong>默认异步</strong> 执行机制的功能</li></ul><h5 id="AJAX-的优势"><a href="#AJAX-的优势" class="headerlink" title="AJAX 的优势"></a>AJAX 的优势</h5><ol><li>不需要插件的支持，原生 js 就可以使用</li><li>用户体验好（不需要刷新页面就可以更新数据）</li><li>减轻服务端和带宽的负担</li><li>缺点： 搜索引擎的支持度不够，因为数据都不在页面上，搜索引擎搜索不到</li></ol><h5 id="AJAX-的使用"><a href="#AJAX-的使用" class="headerlink" title="AJAX 的使用"></a>AJAX 的使用</h5><ul><li>在 js 中有内置的构造函数来创建 ajax 对象</li><li>创建 ajax 对象以后，我们就使用 ajax 对象的方法去发送请求和接受响应</li></ul><h6 id="创建一个-ajax-对象"><a href="#创建一个-ajax-对象" class="headerlink" title="创建一个 ajax 对象"></a>创建一个 ajax 对象</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// IE9及以上</span><br><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><br><span class="hljs-comment">// IE9以下</span><br><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Mricosoft.XMLHTTP&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>上面就是有了一个 ajax 对象</li><li>我们就可以使用这个 <code>xhr</code> 对象来发送 ajax 请求了</li></ul><h6 id="配置链接信息"><a href="#配置链接信息" class="headerlink" title="配置链接信息"></a>配置链接信息</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><br><span class="hljs-comment">// xhr 对象中的 open 方法是来配置请求信息的</span><br><span class="hljs-comment">// 第一个参数是本次请求的请求方式 get / post / put / ...</span><br><span class="hljs-comment">// 第二个参数是本次请求的 url </span><br><span class="hljs-comment">// 第三个参数是本次请求是否异步，默认 true 表示异步，false 表示同步</span><br><span class="hljs-comment">// xhr.open(&#x27;请求方式&#x27;, &#x27;请求地址&#x27;, 是否异步)</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;./data.php&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>上面的代码执行完毕以后，本次请求的基本配置信息就写完了</li></ul><h6 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;./data.php&#x27;</span>)<br><br><span class="hljs-comment">// 使用 xhr 对象中的 send 方法来发送请求</span><br>xhr.<span class="hljs-title function_">send</span>()<br></code></pre></td></tr></table></figure><ul><li>上面代码是把配置好信息的 ajax 对象发送到服务端</li></ul><h6 id="一个基本的-ajax-请求"><a href="#一个基本的-ajax-请求" class="headerlink" title="一个基本的 ajax 请求"></a>一个基本的 ajax 请求</h6><ul><li>一个最基本的 ajax 请求就是上面三步</li><li>但是光有上面的三个步骤，我们确实能把请求发送的到服务端</li><li>如果服务端正常的话，响应也能回到客户端</li><li>但是我们拿不到响应</li><li>如果想拿到响应，我们有两个前提条件<ol><li>本次 HTTP 请求是成功的，也就是我们之前说的 http 状态码为 200 ~ 299</li><li>ajax 对象也有自己的状态码，用来表示本次 ajax 请求中各个阶段</li></ol></li></ul><h6 id="ajax-状态码"><a href="#ajax-状态码" class="headerlink" title="ajax 状态码"></a>ajax 状态码</h6><ul><li>ajax 状态码 - <code>xhr.readyState</code></li><li>是用来表示一个 ajax 请求的全部过程中的某一个状态<ul><li><code>readyState === 0</code>：  表示未初始化完成，也就是 <code>open</code> 方法还没有执行</li><li><code>readyState === 1</code>：  表示配置信息已经完成，也就是执行完 <code>open</code> 之后</li><li><code>readyState === 2</code>：  表示 <code>send</code> 方法已经执行完成</li><li><code>readyState === 3</code>：  表示正在解析响应内容</li><li><code>readyState === 4</code>：  表示响应内容已经解析完毕，可以在客户端使用了</li></ul></li><li>这个时候我们就会发现，当一个 ajax 请求的全部过程中，只有当 <code>readyState === 4</code> 的时候，我们才可以正常使用服务端给我们的数据</li><li>所以，配合 http 状态码为 200 ~ 299 <ul><li>一个 ajax 对象中有一个成员叫做 <code>xhr.status</code> </li><li>这个成员就是记录本次请求的 http 状态码的</li></ul></li><li>两个条件都满足的时候，才是本次请求正常完成</li></ul><h6 id="readyStateChange"><a href="#readyStateChange" class="headerlink" title="readyStateChange"></a>readyStateChange</h6><ul><li><p>在 ajax 对象中有一个事件，叫做 <code>readyStateChange</code> 事件</p></li><li><p>这个事件是专门用来监听 ajax 对象的 <code>readyState</code> 值改变的的行为</p></li><li><p>也就是说只要 <code>readyState</code> 的值发生变化了，那么就会触发该事件</p></li><li><p>所以我们就在这个事件中来监听 ajax 的 <code>readyState</code> 是不是到 4 了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;./data.php&#x27;</span>)<br><br>xhr.<span class="hljs-title function_">send</span>()<br><br>xhr.<span class="hljs-property">onreadyStateChange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 每次 readyState 改变的时候都会触发该事件</span><br>  <span class="hljs-comment">// 我们就在这里判断 readyState 的值是不是到 4</span><br>  <span class="hljs-comment">// 并且 http 的状态码是不是 200 ~ 299</span><br>  <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-regexp">/^2\d&#123;2&#125;$/</span>.<span class="hljs-title function_">test</span>(xhr.<span class="hljs-property">status</span>)) &#123;<br>    <span class="hljs-comment">// 这里表示验证通过</span><br>    <span class="hljs-comment">// 我们就可以获取服务端给我们响应的内容了</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="responseText"><a href="#responseText" class="headerlink" title="responseText"></a>responseText</h6><ul><li><p>ajax 对象中的 <code>responseText</code> 成员</p></li><li><p>就是用来记录服务端给我们的响应体内容的</p></li><li><p>所以我们就用这个成员来获取响应体内容就可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;./data.php&#x27;</span>)<br><br>xhr.<span class="hljs-title function_">send</span>()<br><br>xhr.<span class="hljs-property">onreadyStateChange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-regexp">/^2\d&#123;2&#125;$/</span>.<span class="hljs-title function_">test</span>(xhr.<span class="hljs-property">status</span>)) &#123;<br>    <span class="hljs-comment">// 我们在这里直接打印 xhr.responseText 来查看服务端给我们返回的内容</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="使用-ajax-发送请求时携带参数"><a href="#使用-ajax-发送请求时携带参数" class="headerlink" title="使用 ajax 发送请求时携带参数"></a>使用 ajax 发送请求时携带参数</h5><ul><li>我们使用 ajax 发送请求也是可以携带参数的</li><li>参数就是和后台交互的时候给他的一些信息</li><li>但是携带参数 get 和 post 两个方式还是有区别的</li></ul><h6 id="发送一个带有参数的-get-请求"><a href="#发送一个带有参数的-get-请求" class="headerlink" title="发送一个带有参数的 get 请求"></a>发送一个带有参数的 get 请求</h6><ul><li><p>get 请求的参数就直接在 url 后面进行拼接就可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><span class="hljs-comment">// 直接在地址后面加一个 ?，然后以 key=value 的形式传递</span><br><span class="hljs-comment">// 两个数据之间以 &amp; 分割</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;./data.php?a=100&amp;b=200&#x27;</span>)<br><br>xhr.<span class="hljs-title function_">send</span>()<br></code></pre></td></tr></table></figure><ul><li>这样服务端就能接受到两个参数</li><li>一个是 a，值是 100</li><li>一个是 b，值是 200</li></ul></li></ul><h6 id="发送一个带有参数的-post-请求"><a href="#发送一个带有参数的-post-请求" class="headerlink" title="发送一个带有参数的 post 请求"></a>发送一个带有参数的 post 请求</h6><ul><li><p>post 请求的参数是携带在请求体中的，所以不需要再 url 后面拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;./data.php&#x27;</span>)<br><br><span class="hljs-comment">// 如果是用 ajax 对象发送 post 请求，必须要先设置一下请求头中的 content-type</span><br><span class="hljs-comment">// 告诉一下服务端我给你的是一个什么样子的数据格式</span><br>xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>)<br><br><span class="hljs-comment">// 请求体直接再 send 的时候写在 () 里面就行</span><br><span class="hljs-comment">// 不需要问号，直接就是 &#x27;key=value&amp;key=value&#x27; 的形式</span><br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;a=100&amp;b=200&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>application/x-www-form-urlencoded</code> 表示的数据格式就是 <code>key=value&amp;key=value</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>GET方式也支持传参数</span><br>   <span class="hljs-comment">// ajax.open(&quot;GET&quot;, &quot;http://localhost:3000/users?username=liuhongguo&quot;)</span><br><br><br>   <span class="hljs-keyword">const</span> myget = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#myget&#x27;</span>);<br>   myget.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;myget clicked&quot;</span>)<br>       <span class="hljs-keyword">const</span> ajax = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>       ajax.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;http://localhost:3000/users?username=XUSHIZHAN&quot;</span>)<br><br>       ajax.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">if</span> (ajax.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(ajax.<span class="hljs-property">responseText</span>))<br>           &#125;<br>          <br>       &#125;<br>       ajax.<span class="hljs-title function_">send</span>()<br>   &#125;<br><br><br>   <br>   <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>post接口发送过的内容可以是：</span><br>   <span class="hljs-comment">// 1. name= name &amp;&amp; age = 18 字符串模式</span><br>   <span class="hljs-comment">// 2.&#123;&quot;name&quot;：&quot;name&quot;,&quot;age&quot;:&quot;18&quot;&#125;</span><br>   <span class="hljs-comment">//当为第一种的时候需要添加一个命令：</span><br>   <span class="hljs-comment">// ajax.setResponseHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)</span><br>   <span class="hljs-comment">// 第二种JSON的方式</span><br>   <span class="hljs-comment">// ajax.setResponseHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)</span><br>   <br><br>   mypost.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">const</span> ajax = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>       ajax.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;http://localhost:3000/users&quot;</span>)<br><br>       ajax.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^2\d&#123;2&#125;$/</span>.<span class="hljs-title function_">test</span>(ajax.<span class="hljs-property">status</span>)) &#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(ajax.<span class="hljs-property">responseText</span>))<br>           &#125;<br>       &#125;<br>       ajax.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>)<br>       ajax.<span class="hljs-title function_">send</span>(<span class="hljs-string">`username=XUSHIZHAN &amp;&amp; age = 22 &amp;&amp;  password = 123`</span>)<br>   &#125;<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>put接口发送过的内容可以是：</span><br>   <span class="hljs-comment">//  put接口修改毁所有的都修改，当少些内容的就会直接覆盖</span><br><br><br>   myput.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;myput clicked&quot;</span>)<br>       <span class="hljs-keyword">const</span> ajax = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>       ajax.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;http://localhost:3000/users/1&quot;</span>)<br><br>       ajax.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">if</span> (ajax.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(ajax.<span class="hljs-property">responseText</span>))<br>           &#125;<br>          <br>       &#125;<br>       ajax.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>)<br>       ajax.<span class="hljs-title function_">send</span>(<span class="hljs-string">`username=XUSHIZHAN &amp;&amp; age = 99 &amp;&amp; password == ashdasdasdasdas`</span>)<br>   &#125;<br><br>   mydelete.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;mydelete clicked&quot;</span>)<br>       <span class="hljs-keyword">const</span> ajax = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>       ajax.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;PATCH&quot;</span>, <span class="hljs-string">&quot;http://localhost:3000/users/2&quot;</span>)<br><br>       ajax.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">if</span> (ajax.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(ajax.<span class="hljs-property">responseText</span>))<br>           &#125;<br>          <br>       &#125;<br>       ajax.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>)<br>       ajax.<span class="hljs-title function_">send</span>(<span class="hljs-string">`username=XUSHIZHAN&amp;&amp;password=ashdasdasdasdas`</span>)<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/18/hello-world/"/>
    <url>/2022/10/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
